{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNvSkjBzs0NT9ht8I5vOsrY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_sFbdoXQsrps","executionInfo":{"status":"ok","timestamp":1700450331763,"user_tz":-330,"elapsed":421,"user":{"displayName":"Dudekula Mubarakali","userId":"16734275428637608120"}},"outputId":"980b1397-07fa-498a-eee5-f9db14ba4c42"},"outputs":[{"output_type":"stream","name":"stdout","text":["Extracted Emails: ['support@example.com', 'info@company.com']\n","Is support@example.com valid? True\n","Is info@company.com valid? True\n"]}],"source":["import re\n","\n","def extract_emails(text):\n","    # Define the regular expression pattern for matching email addresses\n","    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n","\n","    # Use re.findall() to find all email addresses in the given text\n","    emails = re.findall(email_pattern, text)\n","\n","    return emails\n","\n","def validate_email(email):\n","    # Define a regular expression pattern for validating email addresses\n","    email_validation_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n","\n","    # Use re.fullmatch() to check if the entire string is a valid email address\n","    match = re.fullmatch(email_validation_pattern, email)\n","\n","    return match is not None\n","\n","# Example usage:\n","text = \"Please contact support@example.com for assistance or info@company.com for more information.\"\n","\n","# Extract email addresses from the text\n","extracted_emails = extract_emails(text)\n","print(\"Extracted Emails:\", extracted_emails)\n","\n","# Validate each extracted email address\n","for email in extracted_emails:\n","    is_valid = validate_email(email)\n","    print(f\"Is {email} valid? {is_valid}\")\n"]}]}